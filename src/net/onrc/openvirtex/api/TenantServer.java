/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.onrc.openvirtex.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TenantServer {

  public interface Iface {

    public int createVirtualNetwork(String protocol, String controllerAddress, short controllerPort, String networkAddress, short mask) throws org.apache.thrift.TException;

    public long createVirtualSwitch(int tenantId, List<String> dpids) throws org.apache.thrift.TException;

    public int createHost(int tenantId, String dpid, short portNumber) throws org.apache.thrift.TException;

    public int createVirtualLink(int tenantId, String pathString) throws org.apache.thrift.TException;

    public boolean startNetwork(int tenantId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createVirtualNetwork(String protocol, String controllerAddress, short controllerPort, String networkAddress, short mask, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createVirtualNetwork_call> resultHandler) throws org.apache.thrift.TException;

    public void createVirtualSwitch(int tenantId, List<String> dpids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createVirtualSwitch_call> resultHandler) throws org.apache.thrift.TException;

    public void createHost(int tenantId, String dpid, short portNumber, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createHost_call> resultHandler) throws org.apache.thrift.TException;

    public void createVirtualLink(int tenantId, String pathString, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createVirtualLink_call> resultHandler) throws org.apache.thrift.TException;

    public void startNetwork(int tenantId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startNetwork_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int createVirtualNetwork(String protocol, String controllerAddress, short controllerPort, String networkAddress, short mask) throws org.apache.thrift.TException
    {
      send_createVirtualNetwork(protocol, controllerAddress, controllerPort, networkAddress, mask);
      return recv_createVirtualNetwork();
    }

    public void send_createVirtualNetwork(String protocol, String controllerAddress, short controllerPort, String networkAddress, short mask) throws org.apache.thrift.TException
    {
      createVirtualNetwork_args args = new createVirtualNetwork_args();
      args.setProtocol(protocol);
      args.setControllerAddress(controllerAddress);
      args.setControllerPort(controllerPort);
      args.setNetworkAddress(networkAddress);
      args.setMask(mask);
      sendBase("createVirtualNetwork", args);
    }

    public int recv_createVirtualNetwork() throws org.apache.thrift.TException
    {
      createVirtualNetwork_result result = new createVirtualNetwork_result();
      receiveBase(result, "createVirtualNetwork");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createVirtualNetwork failed: unknown result");
    }

    public long createVirtualSwitch(int tenantId, List<String> dpids) throws org.apache.thrift.TException
    {
      send_createVirtualSwitch(tenantId, dpids);
      return recv_createVirtualSwitch();
    }

    public void send_createVirtualSwitch(int tenantId, List<String> dpids) throws org.apache.thrift.TException
    {
      createVirtualSwitch_args args = new createVirtualSwitch_args();
      args.setTenantId(tenantId);
      args.setDpids(dpids);
      sendBase("createVirtualSwitch", args);
    }

    public long recv_createVirtualSwitch() throws org.apache.thrift.TException
    {
      createVirtualSwitch_result result = new createVirtualSwitch_result();
      receiveBase(result, "createVirtualSwitch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createVirtualSwitch failed: unknown result");
    }

    public int createHost(int tenantId, String dpid, short portNumber) throws org.apache.thrift.TException
    {
      send_createHost(tenantId, dpid, portNumber);
      return recv_createHost();
    }

    public void send_createHost(int tenantId, String dpid, short portNumber) throws org.apache.thrift.TException
    {
      createHost_args args = new createHost_args();
      args.setTenantId(tenantId);
      args.setDpid(dpid);
      args.setPortNumber(portNumber);
      sendBase("createHost", args);
    }

    public int recv_createHost() throws org.apache.thrift.TException
    {
      createHost_result result = new createHost_result();
      receiveBase(result, "createHost");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createHost failed: unknown result");
    }

    public int createVirtualLink(int tenantId, String pathString) throws org.apache.thrift.TException
    {
      send_createVirtualLink(tenantId, pathString);
      return recv_createVirtualLink();
    }

    public void send_createVirtualLink(int tenantId, String pathString) throws org.apache.thrift.TException
    {
      createVirtualLink_args args = new createVirtualLink_args();
      args.setTenantId(tenantId);
      args.setPathString(pathString);
      sendBase("createVirtualLink", args);
    }

    public int recv_createVirtualLink() throws org.apache.thrift.TException
    {
      createVirtualLink_result result = new createVirtualLink_result();
      receiveBase(result, "createVirtualLink");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createVirtualLink failed: unknown result");
    }

    public boolean startNetwork(int tenantId) throws org.apache.thrift.TException
    {
      send_startNetwork(tenantId);
      return recv_startNetwork();
    }

    public void send_startNetwork(int tenantId) throws org.apache.thrift.TException
    {
      startNetwork_args args = new startNetwork_args();
      args.setTenantId(tenantId);
      sendBase("startNetwork", args);
    }

    public boolean recv_startNetwork() throws org.apache.thrift.TException
    {
      startNetwork_result result = new startNetwork_result();
      receiveBase(result, "startNetwork");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startNetwork failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createVirtualNetwork(String protocol, String controllerAddress, short controllerPort, String networkAddress, short mask, org.apache.thrift.async.AsyncMethodCallback<createVirtualNetwork_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createVirtualNetwork_call method_call = new createVirtualNetwork_call(protocol, controllerAddress, controllerPort, networkAddress, mask, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createVirtualNetwork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String protocol;
      private String controllerAddress;
      private short controllerPort;
      private String networkAddress;
      private short mask;
      public createVirtualNetwork_call(String protocol, String controllerAddress, short controllerPort, String networkAddress, short mask, org.apache.thrift.async.AsyncMethodCallback<createVirtualNetwork_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.protocol = protocol;
        this.controllerAddress = controllerAddress;
        this.controllerPort = controllerPort;
        this.networkAddress = networkAddress;
        this.mask = mask;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createVirtualNetwork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createVirtualNetwork_args args = new createVirtualNetwork_args();
        args.setProtocol(protocol);
        args.setControllerAddress(controllerAddress);
        args.setControllerPort(controllerPort);
        args.setNetworkAddress(networkAddress);
        args.setMask(mask);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createVirtualNetwork();
      }
    }

    public void createVirtualSwitch(int tenantId, List<String> dpids, org.apache.thrift.async.AsyncMethodCallback<createVirtualSwitch_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createVirtualSwitch_call method_call = new createVirtualSwitch_call(tenantId, dpids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createVirtualSwitch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int tenantId;
      private List<String> dpids;
      public createVirtualSwitch_call(int tenantId, List<String> dpids, org.apache.thrift.async.AsyncMethodCallback<createVirtualSwitch_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantId = tenantId;
        this.dpids = dpids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createVirtualSwitch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createVirtualSwitch_args args = new createVirtualSwitch_args();
        args.setTenantId(tenantId);
        args.setDpids(dpids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createVirtualSwitch();
      }
    }

    public void createHost(int tenantId, String dpid, short portNumber, org.apache.thrift.async.AsyncMethodCallback<createHost_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createHost_call method_call = new createHost_call(tenantId, dpid, portNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createHost_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int tenantId;
      private String dpid;
      private short portNumber;
      public createHost_call(int tenantId, String dpid, short portNumber, org.apache.thrift.async.AsyncMethodCallback<createHost_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantId = tenantId;
        this.dpid = dpid;
        this.portNumber = portNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createHost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createHost_args args = new createHost_args();
        args.setTenantId(tenantId);
        args.setDpid(dpid);
        args.setPortNumber(portNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createHost();
      }
    }

    public void createVirtualLink(int tenantId, String pathString, org.apache.thrift.async.AsyncMethodCallback<createVirtualLink_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createVirtualLink_call method_call = new createVirtualLink_call(tenantId, pathString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createVirtualLink_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int tenantId;
      private String pathString;
      public createVirtualLink_call(int tenantId, String pathString, org.apache.thrift.async.AsyncMethodCallback<createVirtualLink_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantId = tenantId;
        this.pathString = pathString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createVirtualLink", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createVirtualLink_args args = new createVirtualLink_args();
        args.setTenantId(tenantId);
        args.setPathString(pathString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createVirtualLink();
      }
    }

    public void startNetwork(int tenantId, org.apache.thrift.async.AsyncMethodCallback<startNetwork_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startNetwork_call method_call = new startNetwork_call(tenantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startNetwork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int tenantId;
      public startNetwork_call(int tenantId, org.apache.thrift.async.AsyncMethodCallback<startNetwork_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantId = tenantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startNetwork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startNetwork_args args = new startNetwork_args();
        args.setTenantId(tenantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startNetwork();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createVirtualNetwork", new createVirtualNetwork());
      processMap.put("createVirtualSwitch", new createVirtualSwitch());
      processMap.put("createHost", new createHost());
      processMap.put("createVirtualLink", new createVirtualLink());
      processMap.put("startNetwork", new startNetwork());
      return processMap;
    }

    public static class createVirtualNetwork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createVirtualNetwork_args> {
      public createVirtualNetwork() {
        super("createVirtualNetwork");
      }

      public createVirtualNetwork_args getEmptyArgsInstance() {
        return new createVirtualNetwork_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createVirtualNetwork_result getResult(I iface, createVirtualNetwork_args args) throws org.apache.thrift.TException {
        createVirtualNetwork_result result = new createVirtualNetwork_result();
        result.success = iface.createVirtualNetwork(args.protocol, args.controllerAddress, args.controllerPort, args.networkAddress, args.mask);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createVirtualSwitch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createVirtualSwitch_args> {
      public createVirtualSwitch() {
        super("createVirtualSwitch");
      }

      public createVirtualSwitch_args getEmptyArgsInstance() {
        return new createVirtualSwitch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createVirtualSwitch_result getResult(I iface, createVirtualSwitch_args args) throws org.apache.thrift.TException {
        createVirtualSwitch_result result = new createVirtualSwitch_result();
        result.success = iface.createVirtualSwitch(args.tenantId, args.dpids);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createHost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createHost_args> {
      public createHost() {
        super("createHost");
      }

      public createHost_args getEmptyArgsInstance() {
        return new createHost_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createHost_result getResult(I iface, createHost_args args) throws org.apache.thrift.TException {
        createHost_result result = new createHost_result();
        result.success = iface.createHost(args.tenantId, args.dpid, args.portNumber);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createVirtualLink<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createVirtualLink_args> {
      public createVirtualLink() {
        super("createVirtualLink");
      }

      public createVirtualLink_args getEmptyArgsInstance() {
        return new createVirtualLink_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createVirtualLink_result getResult(I iface, createVirtualLink_args args) throws org.apache.thrift.TException {
        createVirtualLink_result result = new createVirtualLink_result();
        result.success = iface.createVirtualLink(args.tenantId, args.pathString);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class startNetwork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startNetwork_args> {
      public startNetwork() {
        super("startNetwork");
      }

      public startNetwork_args getEmptyArgsInstance() {
        return new startNetwork_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startNetwork_result getResult(I iface, startNetwork_args args) throws org.apache.thrift.TException {
        startNetwork_result result = new startNetwork_result();
        result.success = iface.startNetwork(args.tenantId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class createVirtualNetwork_args implements org.apache.thrift.TBase<createVirtualNetwork_args, createVirtualNetwork_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVirtualNetwork_args");

    private static final org.apache.thrift.protocol.TField PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTROLLER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("controllerAddress", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTROLLER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("controllerPort", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField NETWORK_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("networkAddress", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MASK_FIELD_DESC = new org.apache.thrift.protocol.TField("mask", org.apache.thrift.protocol.TType.I16, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVirtualNetwork_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVirtualNetwork_argsTupleSchemeFactory());
    }

    public String protocol; // required
    public String controllerAddress; // required
    public short controllerPort; // required
    public String networkAddress; // required
    public short mask; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROTOCOL((short)1, "protocol"),
      CONTROLLER_ADDRESS((short)2, "controllerAddress"),
      CONTROLLER_PORT((short)3, "controllerPort"),
      NETWORK_ADDRESS((short)4, "networkAddress"),
      MASK((short)5, "mask");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROTOCOL
            return PROTOCOL;
          case 2: // CONTROLLER_ADDRESS
            return CONTROLLER_ADDRESS;
          case 3: // CONTROLLER_PORT
            return CONTROLLER_PORT;
          case 4: // NETWORK_ADDRESS
            return NETWORK_ADDRESS;
          case 5: // MASK
            return MASK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONTROLLERPORT_ISSET_ID = 0;
    private static final int __MASK_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("protocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTROLLER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("controllerAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTROLLER_PORT, new org.apache.thrift.meta_data.FieldMetaData("controllerPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.NETWORK_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("networkAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MASK, new org.apache.thrift.meta_data.FieldMetaData("mask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVirtualNetwork_args.class, metaDataMap);
    }

    public createVirtualNetwork_args() {
    }

    public createVirtualNetwork_args(
      String protocol,
      String controllerAddress,
      short controllerPort,
      String networkAddress,
      short mask)
    {
      this();
      this.protocol = protocol;
      this.controllerAddress = controllerAddress;
      this.controllerPort = controllerPort;
      setControllerPortIsSet(true);
      this.networkAddress = networkAddress;
      this.mask = mask;
      setMaskIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVirtualNetwork_args(createVirtualNetwork_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProtocol()) {
        this.protocol = other.protocol;
      }
      if (other.isSetControllerAddress()) {
        this.controllerAddress = other.controllerAddress;
      }
      this.controllerPort = other.controllerPort;
      if (other.isSetNetworkAddress()) {
        this.networkAddress = other.networkAddress;
      }
      this.mask = other.mask;
    }

    public createVirtualNetwork_args deepCopy() {
      return new createVirtualNetwork_args(this);
    }

    @Override
    public void clear() {
      this.protocol = null;
      this.controllerAddress = null;
      setControllerPortIsSet(false);
      this.controllerPort = 0;
      this.networkAddress = null;
      setMaskIsSet(false);
      this.mask = 0;
    }

    public String getProtocol() {
      return this.protocol;
    }

    public createVirtualNetwork_args setProtocol(String protocol) {
      this.protocol = protocol;
      return this;
    }

    public void unsetProtocol() {
      this.protocol = null;
    }

    /** Returns true if field protocol is set (has been assigned a value) and false otherwise */
    public boolean isSetProtocol() {
      return this.protocol != null;
    }

    public void setProtocolIsSet(boolean value) {
      if (!value) {
        this.protocol = null;
      }
    }

    public String getControllerAddress() {
      return this.controllerAddress;
    }

    public createVirtualNetwork_args setControllerAddress(String controllerAddress) {
      this.controllerAddress = controllerAddress;
      return this;
    }

    public void unsetControllerAddress() {
      this.controllerAddress = null;
    }

    /** Returns true if field controllerAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetControllerAddress() {
      return this.controllerAddress != null;
    }

    public void setControllerAddressIsSet(boolean value) {
      if (!value) {
        this.controllerAddress = null;
      }
    }

    public short getControllerPort() {
      return this.controllerPort;
    }

    public createVirtualNetwork_args setControllerPort(short controllerPort) {
      this.controllerPort = controllerPort;
      setControllerPortIsSet(true);
      return this;
    }

    public void unsetControllerPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTROLLERPORT_ISSET_ID);
    }

    /** Returns true if field controllerPort is set (has been assigned a value) and false otherwise */
    public boolean isSetControllerPort() {
      return EncodingUtils.testBit(__isset_bitfield, __CONTROLLERPORT_ISSET_ID);
    }

    public void setControllerPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTROLLERPORT_ISSET_ID, value);
    }

    public String getNetworkAddress() {
      return this.networkAddress;
    }

    public createVirtualNetwork_args setNetworkAddress(String networkAddress) {
      this.networkAddress = networkAddress;
      return this;
    }

    public void unsetNetworkAddress() {
      this.networkAddress = null;
    }

    /** Returns true if field networkAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetNetworkAddress() {
      return this.networkAddress != null;
    }

    public void setNetworkAddressIsSet(boolean value) {
      if (!value) {
        this.networkAddress = null;
      }
    }

    public short getMask() {
      return this.mask;
    }

    public createVirtualNetwork_args setMask(short mask) {
      this.mask = mask;
      setMaskIsSet(true);
      return this;
    }

    public void unsetMask() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MASK_ISSET_ID);
    }

    /** Returns true if field mask is set (has been assigned a value) and false otherwise */
    public boolean isSetMask() {
      return EncodingUtils.testBit(__isset_bitfield, __MASK_ISSET_ID);
    }

    public void setMaskIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MASK_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROTOCOL:
        if (value == null) {
          unsetProtocol();
        } else {
          setProtocol((String)value);
        }
        break;

      case CONTROLLER_ADDRESS:
        if (value == null) {
          unsetControllerAddress();
        } else {
          setControllerAddress((String)value);
        }
        break;

      case CONTROLLER_PORT:
        if (value == null) {
          unsetControllerPort();
        } else {
          setControllerPort((Short)value);
        }
        break;

      case NETWORK_ADDRESS:
        if (value == null) {
          unsetNetworkAddress();
        } else {
          setNetworkAddress((String)value);
        }
        break;

      case MASK:
        if (value == null) {
          unsetMask();
        } else {
          setMask((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROTOCOL:
        return getProtocol();

      case CONTROLLER_ADDRESS:
        return getControllerAddress();

      case CONTROLLER_PORT:
        return Short.valueOf(getControllerPort());

      case NETWORK_ADDRESS:
        return getNetworkAddress();

      case MASK:
        return Short.valueOf(getMask());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROTOCOL:
        return isSetProtocol();
      case CONTROLLER_ADDRESS:
        return isSetControllerAddress();
      case CONTROLLER_PORT:
        return isSetControllerPort();
      case NETWORK_ADDRESS:
        return isSetNetworkAddress();
      case MASK:
        return isSetMask();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVirtualNetwork_args)
        return this.equals((createVirtualNetwork_args)that);
      return false;
    }

    public boolean equals(createVirtualNetwork_args that) {
      if (that == null)
        return false;

      boolean this_present_protocol = true && this.isSetProtocol();
      boolean that_present_protocol = true && that.isSetProtocol();
      if (this_present_protocol || that_present_protocol) {
        if (!(this_present_protocol && that_present_protocol))
          return false;
        if (!this.protocol.equals(that.protocol))
          return false;
      }

      boolean this_present_controllerAddress = true && this.isSetControllerAddress();
      boolean that_present_controllerAddress = true && that.isSetControllerAddress();
      if (this_present_controllerAddress || that_present_controllerAddress) {
        if (!(this_present_controllerAddress && that_present_controllerAddress))
          return false;
        if (!this.controllerAddress.equals(that.controllerAddress))
          return false;
      }

      boolean this_present_controllerPort = true;
      boolean that_present_controllerPort = true;
      if (this_present_controllerPort || that_present_controllerPort) {
        if (!(this_present_controllerPort && that_present_controllerPort))
          return false;
        if (this.controllerPort != that.controllerPort)
          return false;
      }

      boolean this_present_networkAddress = true && this.isSetNetworkAddress();
      boolean that_present_networkAddress = true && that.isSetNetworkAddress();
      if (this_present_networkAddress || that_present_networkAddress) {
        if (!(this_present_networkAddress && that_present_networkAddress))
          return false;
        if (!this.networkAddress.equals(that.networkAddress))
          return false;
      }

      boolean this_present_mask = true;
      boolean that_present_mask = true;
      if (this_present_mask || that_present_mask) {
        if (!(this_present_mask && that_present_mask))
          return false;
        if (this.mask != that.mask)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createVirtualNetwork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createVirtualNetwork_args typedOther = (createVirtualNetwork_args)other;

      lastComparison = Boolean.valueOf(isSetProtocol()).compareTo(typedOther.isSetProtocol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProtocol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol, typedOther.protocol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControllerAddress()).compareTo(typedOther.isSetControllerAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControllerAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.controllerAddress, typedOther.controllerAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControllerPort()).compareTo(typedOther.isSetControllerPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControllerPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.controllerPort, typedOther.controllerPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNetworkAddress()).compareTo(typedOther.isSetNetworkAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNetworkAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkAddress, typedOther.networkAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMask()).compareTo(typedOther.isSetMask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mask, typedOther.mask);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVirtualNetwork_args(");
      boolean first = true;

      sb.append("protocol:");
      if (this.protocol == null) {
        sb.append("null");
      } else {
        sb.append(this.protocol);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("controllerAddress:");
      if (this.controllerAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.controllerAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("controllerPort:");
      sb.append(this.controllerPort);
      first = false;
      if (!first) sb.append(", ");
      sb.append("networkAddress:");
      if (this.networkAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.networkAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mask:");
      sb.append(this.mask);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVirtualNetwork_argsStandardSchemeFactory implements SchemeFactory {
      public createVirtualNetwork_argsStandardScheme getScheme() {
        return new createVirtualNetwork_argsStandardScheme();
      }
    }

    private static class createVirtualNetwork_argsStandardScheme extends StandardScheme<createVirtualNetwork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVirtualNetwork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROTOCOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.protocol = iprot.readString();
                struct.setProtocolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTROLLER_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.controllerAddress = iprot.readString();
                struct.setControllerAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTROLLER_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.controllerPort = iprot.readI16();
                struct.setControllerPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NETWORK_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.networkAddress = iprot.readString();
                struct.setNetworkAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MASK
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.mask = iprot.readI16();
                struct.setMaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVirtualNetwork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.protocol != null) {
          oprot.writeFieldBegin(PROTOCOL_FIELD_DESC);
          oprot.writeString(struct.protocol);
          oprot.writeFieldEnd();
        }
        if (struct.controllerAddress != null) {
          oprot.writeFieldBegin(CONTROLLER_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.controllerAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONTROLLER_PORT_FIELD_DESC);
        oprot.writeI16(struct.controllerPort);
        oprot.writeFieldEnd();
        if (struct.networkAddress != null) {
          oprot.writeFieldBegin(NETWORK_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.networkAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MASK_FIELD_DESC);
        oprot.writeI16(struct.mask);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVirtualNetwork_argsTupleSchemeFactory implements SchemeFactory {
      public createVirtualNetwork_argsTupleScheme getScheme() {
        return new createVirtualNetwork_argsTupleScheme();
      }
    }

    private static class createVirtualNetwork_argsTupleScheme extends TupleScheme<createVirtualNetwork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVirtualNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProtocol()) {
          optionals.set(0);
        }
        if (struct.isSetControllerAddress()) {
          optionals.set(1);
        }
        if (struct.isSetControllerPort()) {
          optionals.set(2);
        }
        if (struct.isSetNetworkAddress()) {
          optionals.set(3);
        }
        if (struct.isSetMask()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetProtocol()) {
          oprot.writeString(struct.protocol);
        }
        if (struct.isSetControllerAddress()) {
          oprot.writeString(struct.controllerAddress);
        }
        if (struct.isSetControllerPort()) {
          oprot.writeI16(struct.controllerPort);
        }
        if (struct.isSetNetworkAddress()) {
          oprot.writeString(struct.networkAddress);
        }
        if (struct.isSetMask()) {
          oprot.writeI16(struct.mask);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVirtualNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.protocol = iprot.readString();
          struct.setProtocolIsSet(true);
        }
        if (incoming.get(1)) {
          struct.controllerAddress = iprot.readString();
          struct.setControllerAddressIsSet(true);
        }
        if (incoming.get(2)) {
          struct.controllerPort = iprot.readI16();
          struct.setControllerPortIsSet(true);
        }
        if (incoming.get(3)) {
          struct.networkAddress = iprot.readString();
          struct.setNetworkAddressIsSet(true);
        }
        if (incoming.get(4)) {
          struct.mask = iprot.readI16();
          struct.setMaskIsSet(true);
        }
      }
    }

  }

  public static class createVirtualNetwork_result implements org.apache.thrift.TBase<createVirtualNetwork_result, createVirtualNetwork_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVirtualNetwork_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVirtualNetwork_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVirtualNetwork_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVirtualNetwork_result.class, metaDataMap);
    }

    public createVirtualNetwork_result() {
    }

    public createVirtualNetwork_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVirtualNetwork_result(createVirtualNetwork_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createVirtualNetwork_result deepCopy() {
      return new createVirtualNetwork_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createVirtualNetwork_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVirtualNetwork_result)
        return this.equals((createVirtualNetwork_result)that);
      return false;
    }

    public boolean equals(createVirtualNetwork_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createVirtualNetwork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createVirtualNetwork_result typedOther = (createVirtualNetwork_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVirtualNetwork_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVirtualNetwork_resultStandardSchemeFactory implements SchemeFactory {
      public createVirtualNetwork_resultStandardScheme getScheme() {
        return new createVirtualNetwork_resultStandardScheme();
      }
    }

    private static class createVirtualNetwork_resultStandardScheme extends StandardScheme<createVirtualNetwork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVirtualNetwork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVirtualNetwork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVirtualNetwork_resultTupleSchemeFactory implements SchemeFactory {
      public createVirtualNetwork_resultTupleScheme getScheme() {
        return new createVirtualNetwork_resultTupleScheme();
      }
    }

    private static class createVirtualNetwork_resultTupleScheme extends TupleScheme<createVirtualNetwork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVirtualNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVirtualNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createVirtualSwitch_args implements org.apache.thrift.TBase<createVirtualSwitch_args, createVirtualSwitch_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVirtualSwitch_args");

    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DPIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("dpids", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVirtualSwitch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVirtualSwitch_argsTupleSchemeFactory());
    }

    public int tenantId; // required
    public List<String> dpids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ID((short)1, "tenantId"),
      DPIDS((short)2, "dpids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ID
            return TENANT_ID;
          case 2: // DPIDS
            return DPIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TENANTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DPIDS, new org.apache.thrift.meta_data.FieldMetaData("dpids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVirtualSwitch_args.class, metaDataMap);
    }

    public createVirtualSwitch_args() {
    }

    public createVirtualSwitch_args(
      int tenantId,
      List<String> dpids)
    {
      this();
      this.tenantId = tenantId;
      setTenantIdIsSet(true);
      this.dpids = dpids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVirtualSwitch_args(createVirtualSwitch_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.tenantId = other.tenantId;
      if (other.isSetDpids()) {
        List<String> __this__dpids = new ArrayList<String>();
        for (String other_element : other.dpids) {
          __this__dpids.add(other_element);
        }
        this.dpids = __this__dpids;
      }
    }

    public createVirtualSwitch_args deepCopy() {
      return new createVirtualSwitch_args(this);
    }

    @Override
    public void clear() {
      setTenantIdIsSet(false);
      this.tenantId = 0;
      this.dpids = null;
    }

    public int getTenantId() {
      return this.tenantId;
    }

    public createVirtualSwitch_args setTenantId(int tenantId) {
      this.tenantId = tenantId;
      setTenantIdIsSet(true);
      return this;
    }

    public void unsetTenantId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TENANTID_ISSET_ID);
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return EncodingUtils.testBit(__isset_bitfield, __TENANTID_ISSET_ID);
    }

    public void setTenantIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TENANTID_ISSET_ID, value);
    }

    public int getDpidsSize() {
      return (this.dpids == null) ? 0 : this.dpids.size();
    }

    public java.util.Iterator<String> getDpidsIterator() {
      return (this.dpids == null) ? null : this.dpids.iterator();
    }

    public void addToDpids(String elem) {
      if (this.dpids == null) {
        this.dpids = new ArrayList<String>();
      }
      this.dpids.add(elem);
    }

    public List<String> getDpids() {
      return this.dpids;
    }

    public createVirtualSwitch_args setDpids(List<String> dpids) {
      this.dpids = dpids;
      return this;
    }

    public void unsetDpids() {
      this.dpids = null;
    }

    /** Returns true if field dpids is set (has been assigned a value) and false otherwise */
    public boolean isSetDpids() {
      return this.dpids != null;
    }

    public void setDpidsIsSet(boolean value) {
      if (!value) {
        this.dpids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((Integer)value);
        }
        break;

      case DPIDS:
        if (value == null) {
          unsetDpids();
        } else {
          setDpids((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ID:
        return Integer.valueOf(getTenantId());

      case DPIDS:
        return getDpids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ID:
        return isSetTenantId();
      case DPIDS:
        return isSetDpids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVirtualSwitch_args)
        return this.equals((createVirtualSwitch_args)that);
      return false;
    }

    public boolean equals(createVirtualSwitch_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantId = true;
      boolean that_present_tenantId = true;
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (this.tenantId != that.tenantId)
          return false;
      }

      boolean this_present_dpids = true && this.isSetDpids();
      boolean that_present_dpids = true && that.isSetDpids();
      if (this_present_dpids || that_present_dpids) {
        if (!(this_present_dpids && that_present_dpids))
          return false;
        if (!this.dpids.equals(that.dpids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createVirtualSwitch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createVirtualSwitch_args typedOther = (createVirtualSwitch_args)other;

      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(typedOther.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, typedOther.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDpids()).compareTo(typedOther.isSetDpids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDpids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dpids, typedOther.dpids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVirtualSwitch_args(");
      boolean first = true;

      sb.append("tenantId:");
      sb.append(this.tenantId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dpids:");
      if (this.dpids == null) {
        sb.append("null");
      } else {
        sb.append(this.dpids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVirtualSwitch_argsStandardSchemeFactory implements SchemeFactory {
      public createVirtualSwitch_argsStandardScheme getScheme() {
        return new createVirtualSwitch_argsStandardScheme();
      }
    }

    private static class createVirtualSwitch_argsStandardScheme extends StandardScheme<createVirtualSwitch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVirtualSwitch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tenantId = iprot.readI32();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DPIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.dpids = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.dpids.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setDpidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVirtualSwitch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
        oprot.writeI32(struct.tenantId);
        oprot.writeFieldEnd();
        if (struct.dpids != null) {
          oprot.writeFieldBegin(DPIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.dpids.size()));
            for (String _iter3 : struct.dpids)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVirtualSwitch_argsTupleSchemeFactory implements SchemeFactory {
      public createVirtualSwitch_argsTupleScheme getScheme() {
        return new createVirtualSwitch_argsTupleScheme();
      }
    }

    private static class createVirtualSwitch_argsTupleScheme extends TupleScheme<createVirtualSwitch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVirtualSwitch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantId()) {
          optionals.set(0);
        }
        if (struct.isSetDpids()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTenantId()) {
          oprot.writeI32(struct.tenantId);
        }
        if (struct.isSetDpids()) {
          {
            oprot.writeI32(struct.dpids.size());
            for (String _iter4 : struct.dpids)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVirtualSwitch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tenantId = iprot.readI32();
          struct.setTenantIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.dpids = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.dpids.add(_elem7);
            }
          }
          struct.setDpidsIsSet(true);
        }
      }
    }

  }

  public static class createVirtualSwitch_result implements org.apache.thrift.TBase<createVirtualSwitch_result, createVirtualSwitch_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVirtualSwitch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVirtualSwitch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVirtualSwitch_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVirtualSwitch_result.class, metaDataMap);
    }

    public createVirtualSwitch_result() {
    }

    public createVirtualSwitch_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVirtualSwitch_result(createVirtualSwitch_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createVirtualSwitch_result deepCopy() {
      return new createVirtualSwitch_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public createVirtualSwitch_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVirtualSwitch_result)
        return this.equals((createVirtualSwitch_result)that);
      return false;
    }

    public boolean equals(createVirtualSwitch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createVirtualSwitch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createVirtualSwitch_result typedOther = (createVirtualSwitch_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVirtualSwitch_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVirtualSwitch_resultStandardSchemeFactory implements SchemeFactory {
      public createVirtualSwitch_resultStandardScheme getScheme() {
        return new createVirtualSwitch_resultStandardScheme();
      }
    }

    private static class createVirtualSwitch_resultStandardScheme extends StandardScheme<createVirtualSwitch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVirtualSwitch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVirtualSwitch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVirtualSwitch_resultTupleSchemeFactory implements SchemeFactory {
      public createVirtualSwitch_resultTupleScheme getScheme() {
        return new createVirtualSwitch_resultTupleScheme();
      }
    }

    private static class createVirtualSwitch_resultTupleScheme extends TupleScheme<createVirtualSwitch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVirtualSwitch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVirtualSwitch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createHost_args implements org.apache.thrift.TBase<createHost_args, createHost_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHost_args");

    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DPID_FIELD_DESC = new org.apache.thrift.protocol.TField("dpid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PORT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("portNumber", org.apache.thrift.protocol.TType.I16, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createHost_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createHost_argsTupleSchemeFactory());
    }

    public int tenantId; // required
    public String dpid; // required
    public short portNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ID((short)1, "tenantId"),
      DPID((short)2, "dpid"),
      PORT_NUMBER((short)3, "portNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ID
            return TENANT_ID;
          case 2: // DPID
            return DPID;
          case 3: // PORT_NUMBER
            return PORT_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TENANTID_ISSET_ID = 0;
    private static final int __PORTNUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DPID, new org.apache.thrift.meta_data.FieldMetaData("dpid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("portNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHost_args.class, metaDataMap);
    }

    public createHost_args() {
    }

    public createHost_args(
      int tenantId,
      String dpid,
      short portNumber)
    {
      this();
      this.tenantId = tenantId;
      setTenantIdIsSet(true);
      this.dpid = dpid;
      this.portNumber = portNumber;
      setPortNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHost_args(createHost_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.tenantId = other.tenantId;
      if (other.isSetDpid()) {
        this.dpid = other.dpid;
      }
      this.portNumber = other.portNumber;
    }

    public createHost_args deepCopy() {
      return new createHost_args(this);
    }

    @Override
    public void clear() {
      setTenantIdIsSet(false);
      this.tenantId = 0;
      this.dpid = null;
      setPortNumberIsSet(false);
      this.portNumber = 0;
    }

    public int getTenantId() {
      return this.tenantId;
    }

    public createHost_args setTenantId(int tenantId) {
      this.tenantId = tenantId;
      setTenantIdIsSet(true);
      return this;
    }

    public void unsetTenantId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TENANTID_ISSET_ID);
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return EncodingUtils.testBit(__isset_bitfield, __TENANTID_ISSET_ID);
    }

    public void setTenantIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TENANTID_ISSET_ID, value);
    }

    public String getDpid() {
      return this.dpid;
    }

    public createHost_args setDpid(String dpid) {
      this.dpid = dpid;
      return this;
    }

    public void unsetDpid() {
      this.dpid = null;
    }

    /** Returns true if field dpid is set (has been assigned a value) and false otherwise */
    public boolean isSetDpid() {
      return this.dpid != null;
    }

    public void setDpidIsSet(boolean value) {
      if (!value) {
        this.dpid = null;
      }
    }

    public short getPortNumber() {
      return this.portNumber;
    }

    public createHost_args setPortNumber(short portNumber) {
      this.portNumber = portNumber;
      setPortNumberIsSet(true);
      return this;
    }

    public void unsetPortNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORTNUMBER_ISSET_ID);
    }

    /** Returns true if field portNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPortNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __PORTNUMBER_ISSET_ID);
    }

    public void setPortNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORTNUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((Integer)value);
        }
        break;

      case DPID:
        if (value == null) {
          unsetDpid();
        } else {
          setDpid((String)value);
        }
        break;

      case PORT_NUMBER:
        if (value == null) {
          unsetPortNumber();
        } else {
          setPortNumber((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ID:
        return Integer.valueOf(getTenantId());

      case DPID:
        return getDpid();

      case PORT_NUMBER:
        return Short.valueOf(getPortNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ID:
        return isSetTenantId();
      case DPID:
        return isSetDpid();
      case PORT_NUMBER:
        return isSetPortNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createHost_args)
        return this.equals((createHost_args)that);
      return false;
    }

    public boolean equals(createHost_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantId = true;
      boolean that_present_tenantId = true;
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (this.tenantId != that.tenantId)
          return false;
      }

      boolean this_present_dpid = true && this.isSetDpid();
      boolean that_present_dpid = true && that.isSetDpid();
      if (this_present_dpid || that_present_dpid) {
        if (!(this_present_dpid && that_present_dpid))
          return false;
        if (!this.dpid.equals(that.dpid))
          return false;
      }

      boolean this_present_portNumber = true;
      boolean that_present_portNumber = true;
      if (this_present_portNumber || that_present_portNumber) {
        if (!(this_present_portNumber && that_present_portNumber))
          return false;
        if (this.portNumber != that.portNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createHost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createHost_args typedOther = (createHost_args)other;

      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(typedOther.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, typedOther.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDpid()).compareTo(typedOther.isSetDpid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDpid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dpid, typedOther.dpid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPortNumber()).compareTo(typedOther.isSetPortNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPortNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portNumber, typedOther.portNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createHost_args(");
      boolean first = true;

      sb.append("tenantId:");
      sb.append(this.tenantId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dpid:");
      if (this.dpid == null) {
        sb.append("null");
      } else {
        sb.append(this.dpid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("portNumber:");
      sb.append(this.portNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createHost_argsStandardSchemeFactory implements SchemeFactory {
      public createHost_argsStandardScheme getScheme() {
        return new createHost_argsStandardScheme();
      }
    }

    private static class createHost_argsStandardScheme extends StandardScheme<createHost_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createHost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tenantId = iprot.readI32();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DPID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dpid = iprot.readString();
                struct.setDpidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PORT_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.portNumber = iprot.readI16();
                struct.setPortNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createHost_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
        oprot.writeI32(struct.tenantId);
        oprot.writeFieldEnd();
        if (struct.dpid != null) {
          oprot.writeFieldBegin(DPID_FIELD_DESC);
          oprot.writeString(struct.dpid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_NUMBER_FIELD_DESC);
        oprot.writeI16(struct.portNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createHost_argsTupleSchemeFactory implements SchemeFactory {
      public createHost_argsTupleScheme getScheme() {
        return new createHost_argsTupleScheme();
      }
    }

    private static class createHost_argsTupleScheme extends TupleScheme<createHost_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createHost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantId()) {
          optionals.set(0);
        }
        if (struct.isSetDpid()) {
          optionals.set(1);
        }
        if (struct.isSetPortNumber()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTenantId()) {
          oprot.writeI32(struct.tenantId);
        }
        if (struct.isSetDpid()) {
          oprot.writeString(struct.dpid);
        }
        if (struct.isSetPortNumber()) {
          oprot.writeI16(struct.portNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createHost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.tenantId = iprot.readI32();
          struct.setTenantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dpid = iprot.readString();
          struct.setDpidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.portNumber = iprot.readI16();
          struct.setPortNumberIsSet(true);
        }
      }
    }

  }

  public static class createHost_result implements org.apache.thrift.TBase<createHost_result, createHost_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHost_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createHost_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createHost_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHost_result.class, metaDataMap);
    }

    public createHost_result() {
    }

    public createHost_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHost_result(createHost_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createHost_result deepCopy() {
      return new createHost_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createHost_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createHost_result)
        return this.equals((createHost_result)that);
      return false;
    }

    public boolean equals(createHost_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createHost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createHost_result typedOther = (createHost_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createHost_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createHost_resultStandardSchemeFactory implements SchemeFactory {
      public createHost_resultStandardScheme getScheme() {
        return new createHost_resultStandardScheme();
      }
    }

    private static class createHost_resultStandardScheme extends StandardScheme<createHost_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createHost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createHost_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createHost_resultTupleSchemeFactory implements SchemeFactory {
      public createHost_resultTupleScheme getScheme() {
        return new createHost_resultTupleScheme();
      }
    }

    private static class createHost_resultTupleScheme extends TupleScheme<createHost_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createHost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createHost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createVirtualLink_args implements org.apache.thrift.TBase<createVirtualLink_args, createVirtualLink_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVirtualLink_args");

    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PATH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("pathString", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVirtualLink_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVirtualLink_argsTupleSchemeFactory());
    }

    public int tenantId; // required
    public String pathString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ID((short)1, "tenantId"),
      PATH_STRING((short)2, "pathString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ID
            return TENANT_ID;
          case 2: // PATH_STRING
            return PATH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TENANTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PATH_STRING, new org.apache.thrift.meta_data.FieldMetaData("pathString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVirtualLink_args.class, metaDataMap);
    }

    public createVirtualLink_args() {
    }

    public createVirtualLink_args(
      int tenantId,
      String pathString)
    {
      this();
      this.tenantId = tenantId;
      setTenantIdIsSet(true);
      this.pathString = pathString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVirtualLink_args(createVirtualLink_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.tenantId = other.tenantId;
      if (other.isSetPathString()) {
        this.pathString = other.pathString;
      }
    }

    public createVirtualLink_args deepCopy() {
      return new createVirtualLink_args(this);
    }

    @Override
    public void clear() {
      setTenantIdIsSet(false);
      this.tenantId = 0;
      this.pathString = null;
    }

    public int getTenantId() {
      return this.tenantId;
    }

    public createVirtualLink_args setTenantId(int tenantId) {
      this.tenantId = tenantId;
      setTenantIdIsSet(true);
      return this;
    }

    public void unsetTenantId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TENANTID_ISSET_ID);
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return EncodingUtils.testBit(__isset_bitfield, __TENANTID_ISSET_ID);
    }

    public void setTenantIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TENANTID_ISSET_ID, value);
    }

    public String getPathString() {
      return this.pathString;
    }

    public createVirtualLink_args setPathString(String pathString) {
      this.pathString = pathString;
      return this;
    }

    public void unsetPathString() {
      this.pathString = null;
    }

    /** Returns true if field pathString is set (has been assigned a value) and false otherwise */
    public boolean isSetPathString() {
      return this.pathString != null;
    }

    public void setPathStringIsSet(boolean value) {
      if (!value) {
        this.pathString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((Integer)value);
        }
        break;

      case PATH_STRING:
        if (value == null) {
          unsetPathString();
        } else {
          setPathString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ID:
        return Integer.valueOf(getTenantId());

      case PATH_STRING:
        return getPathString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ID:
        return isSetTenantId();
      case PATH_STRING:
        return isSetPathString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVirtualLink_args)
        return this.equals((createVirtualLink_args)that);
      return false;
    }

    public boolean equals(createVirtualLink_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantId = true;
      boolean that_present_tenantId = true;
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (this.tenantId != that.tenantId)
          return false;
      }

      boolean this_present_pathString = true && this.isSetPathString();
      boolean that_present_pathString = true && that.isSetPathString();
      if (this_present_pathString || that_present_pathString) {
        if (!(this_present_pathString && that_present_pathString))
          return false;
        if (!this.pathString.equals(that.pathString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createVirtualLink_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createVirtualLink_args typedOther = (createVirtualLink_args)other;

      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(typedOther.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, typedOther.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPathString()).compareTo(typedOther.isSetPathString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPathString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pathString, typedOther.pathString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVirtualLink_args(");
      boolean first = true;

      sb.append("tenantId:");
      sb.append(this.tenantId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pathString:");
      if (this.pathString == null) {
        sb.append("null");
      } else {
        sb.append(this.pathString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVirtualLink_argsStandardSchemeFactory implements SchemeFactory {
      public createVirtualLink_argsStandardScheme getScheme() {
        return new createVirtualLink_argsStandardScheme();
      }
    }

    private static class createVirtualLink_argsStandardScheme extends StandardScheme<createVirtualLink_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVirtualLink_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tenantId = iprot.readI32();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PATH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pathString = iprot.readString();
                struct.setPathStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVirtualLink_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
        oprot.writeI32(struct.tenantId);
        oprot.writeFieldEnd();
        if (struct.pathString != null) {
          oprot.writeFieldBegin(PATH_STRING_FIELD_DESC);
          oprot.writeString(struct.pathString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVirtualLink_argsTupleSchemeFactory implements SchemeFactory {
      public createVirtualLink_argsTupleScheme getScheme() {
        return new createVirtualLink_argsTupleScheme();
      }
    }

    private static class createVirtualLink_argsTupleScheme extends TupleScheme<createVirtualLink_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVirtualLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantId()) {
          optionals.set(0);
        }
        if (struct.isSetPathString()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTenantId()) {
          oprot.writeI32(struct.tenantId);
        }
        if (struct.isSetPathString()) {
          oprot.writeString(struct.pathString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVirtualLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tenantId = iprot.readI32();
          struct.setTenantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pathString = iprot.readString();
          struct.setPathStringIsSet(true);
        }
      }
    }

  }

  public static class createVirtualLink_result implements org.apache.thrift.TBase<createVirtualLink_result, createVirtualLink_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVirtualLink_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVirtualLink_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVirtualLink_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVirtualLink_result.class, metaDataMap);
    }

    public createVirtualLink_result() {
    }

    public createVirtualLink_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVirtualLink_result(createVirtualLink_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createVirtualLink_result deepCopy() {
      return new createVirtualLink_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createVirtualLink_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVirtualLink_result)
        return this.equals((createVirtualLink_result)that);
      return false;
    }

    public boolean equals(createVirtualLink_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createVirtualLink_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createVirtualLink_result typedOther = (createVirtualLink_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVirtualLink_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVirtualLink_resultStandardSchemeFactory implements SchemeFactory {
      public createVirtualLink_resultStandardScheme getScheme() {
        return new createVirtualLink_resultStandardScheme();
      }
    }

    private static class createVirtualLink_resultStandardScheme extends StandardScheme<createVirtualLink_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVirtualLink_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVirtualLink_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVirtualLink_resultTupleSchemeFactory implements SchemeFactory {
      public createVirtualLink_resultTupleScheme getScheme() {
        return new createVirtualLink_resultTupleScheme();
      }
    }

    private static class createVirtualLink_resultTupleScheme extends TupleScheme<createVirtualLink_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVirtualLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVirtualLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class startNetwork_args implements org.apache.thrift.TBase<startNetwork_args, startNetwork_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startNetwork_args");

    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startNetwork_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startNetwork_argsTupleSchemeFactory());
    }

    public int tenantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ID((short)1, "tenantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ID
            return TENANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TENANTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startNetwork_args.class, metaDataMap);
    }

    public startNetwork_args() {
    }

    public startNetwork_args(
      int tenantId)
    {
      this();
      this.tenantId = tenantId;
      setTenantIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startNetwork_args(startNetwork_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.tenantId = other.tenantId;
    }

    public startNetwork_args deepCopy() {
      return new startNetwork_args(this);
    }

    @Override
    public void clear() {
      setTenantIdIsSet(false);
      this.tenantId = 0;
    }

    public int getTenantId() {
      return this.tenantId;
    }

    public startNetwork_args setTenantId(int tenantId) {
      this.tenantId = tenantId;
      setTenantIdIsSet(true);
      return this;
    }

    public void unsetTenantId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TENANTID_ISSET_ID);
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return EncodingUtils.testBit(__isset_bitfield, __TENANTID_ISSET_ID);
    }

    public void setTenantIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TENANTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ID:
        return Integer.valueOf(getTenantId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ID:
        return isSetTenantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startNetwork_args)
        return this.equals((startNetwork_args)that);
      return false;
    }

    public boolean equals(startNetwork_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantId = true;
      boolean that_present_tenantId = true;
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (this.tenantId != that.tenantId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startNetwork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startNetwork_args typedOther = (startNetwork_args)other;

      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(typedOther.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, typedOther.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startNetwork_args(");
      boolean first = true;

      sb.append("tenantId:");
      sb.append(this.tenantId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startNetwork_argsStandardSchemeFactory implements SchemeFactory {
      public startNetwork_argsStandardScheme getScheme() {
        return new startNetwork_argsStandardScheme();
      }
    }

    private static class startNetwork_argsStandardScheme extends StandardScheme<startNetwork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startNetwork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tenantId = iprot.readI32();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startNetwork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
        oprot.writeI32(struct.tenantId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startNetwork_argsTupleSchemeFactory implements SchemeFactory {
      public startNetwork_argsTupleScheme getScheme() {
        return new startNetwork_argsTupleScheme();
      }
    }

    private static class startNetwork_argsTupleScheme extends TupleScheme<startNetwork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTenantId()) {
          oprot.writeI32(struct.tenantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tenantId = iprot.readI32();
          struct.setTenantIdIsSet(true);
        }
      }
    }

  }

  public static class startNetwork_result implements org.apache.thrift.TBase<startNetwork_result, startNetwork_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startNetwork_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startNetwork_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startNetwork_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startNetwork_result.class, metaDataMap);
    }

    public startNetwork_result() {
    }

    public startNetwork_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startNetwork_result(startNetwork_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public startNetwork_result deepCopy() {
      return new startNetwork_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public startNetwork_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startNetwork_result)
        return this.equals((startNetwork_result)that);
      return false;
    }

    public boolean equals(startNetwork_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startNetwork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startNetwork_result typedOther = (startNetwork_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startNetwork_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startNetwork_resultStandardSchemeFactory implements SchemeFactory {
      public startNetwork_resultStandardScheme getScheme() {
        return new startNetwork_resultStandardScheme();
      }
    }

    private static class startNetwork_resultStandardScheme extends StandardScheme<startNetwork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startNetwork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startNetwork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startNetwork_resultTupleSchemeFactory implements SchemeFactory {
      public startNetwork_resultTupleScheme getScheme() {
        return new startNetwork_resultTupleScheme();
      }
    }

    private static class startNetwork_resultTupleScheme extends TupleScheme<startNetwork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
